name: Danceable CI/CD Pipeline
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
#on: [ push ]
#jobs:
#  Explore-GitHub-Actions:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#          cache: 'maven'
#          cache-dependency-path: 'code/backend/pom.xml'
#      - name: Build with Maven
#        working-directory: code/backend
#        run: mvn -B package --file pom.xml
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    

jobs:
  debug-structure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List directory structure
        run: |
          echo "Repository structure:"
          ls -la
          echo "Searching for relevant directories:"
          find . -type d -not -path "*/\.*" | sort

  build-and-test-backend:
    needs: debug-structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Start PostgreSQL
        run: |
          docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres:14
          sleep 10

      - name: Find and build backend
        id: find-backend
        run: |
          # Backend-Verzeichnis finden
          if [ -d "backend" ]; then
            echo "BACKEND_DIR=backend" >> $GITHUB_ENV
            echo "BACKEND_DIR=backend" >> $GITHUB_OUTPUT
            cd backend
          elif [ -d "code/backend" ]; then
            echo "BACKEND_DIR=code/backend" >> $GITHUB_ENV
            echo "BACKEND_DIR=code/backend" >> $GITHUB_OUTPUT
            cd code/backend
          else
            echo "Backend-Verzeichnis nicht gefunden. Suche nach pom.xml:"
            find . -name "pom.xml" -not -path "*/target/*"
            exit 1
          fi

          # Baue das Backend
          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
            ./mvnw clean package
          else
            mvn clean package
          fi

      - name: Archive backend artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: ${{ env.BACKEND_DIR }}/target/*.jar
          retention-days: 1

  containerize:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: success() && (github.event_name == 'push' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find backend directory
        id: find-backend
        run: |
          if [ -d "backend" ]; then
            echo "BACKEND_DIR=backend" >> $GITHUB_OUTPUT
          elif [ -d "code/backend" ]; then
            echo "BACKEND_DIR=code/backend" >> $GITHUB_OUTPUT
          else
            echo "Backend-Verzeichnis nicht gefunden."
            exit 1
          fi

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ${{ steps.find-backend.outputs.BACKEND_DIR }}/target

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ steps.find-backend.outputs.BACKEND_DIR }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: containerize
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Deploy to server
        run: |
          # Version aus Tag extrahieren
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Via SSH auf Server deployen
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }} && \
            export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${VERSION} && \
            docker pull \${BACKEND_IMAGE} && \
            docker-compose down backend && \
            docker-compose up -d backend
          "
